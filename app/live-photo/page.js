'use client';

import { Suspense, useEffect, useRef, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import { findPhotoByCode } from '../../src/utils/photoUpload';

function LivePhotoContent() {
  const searchParams = useSearchParams();
  const [showVideos, setShowVideos] = useState(false);
  const [countdown, setCountdown] = useState(5);
  const [layoutType, setLayoutType] = useState('1x4');
  const [videoUrls, setVideoUrls] = useState([]);
  const [videoBlobUrls, setVideoBlobUrls] = useState([]); // CORS Ïö∞ÌöåÏö© Blob URLs
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isRecording, setIsRecording] = useState(false); // ÎÖπÌôî Ï§ë ÏÉÅÌÉú
  const videoRefs = useRef([]);
  const canvasRef = useRef(null);
  const containerRef = useRef(null);

  // URLÏóêÏÑú ÏÇ¨ÏßÑ ÏΩîÎìúÎ°ú ÎèôÏòÅÏÉÅ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const loadVideos = async () => {
      try {
        const code = searchParams.get('code');
        const layout = searchParams.get('layout') || '1x4';
        setLayoutType(layout);

        if (!code) {
          setError('ÏÇ¨ÏßÑ ÏΩîÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§.');
          setLoading(false);
          return;
        }

        console.log('üîç ÏÇ¨ÏßÑ ÏΩîÎìúÎ°ú ÎèôÏòÅÏÉÅ Ï∞æÍ∏∞:', code);

        // SupabaseÏóêÏÑú ÏÇ¨ÏßÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        const result = await findPhotoByCode(code);

        console.log('üì∏ ÏÇ¨ÏßÑ Îç∞Ïù¥ÌÑ∞:', result);

        if (result.success && result.photo.video_urls && result.photo.video_urls.length > 0) {
          console.log('‚úÖ ÎèôÏòÅÏÉÅ URL Ï∞æÏùå:', result.photo.video_urls);
          setVideoUrls(result.photo.video_urls);

          // CORS Î¨∏Ï†ú Ïö∞Ìöå: ÎπÑÎîîÏò§Î•º BlobÏúºÎ°ú Î≥ÄÌôò
          console.log('üîÑ ÎπÑÎîîÏò§Î•º BlobÏúºÎ°ú Î≥ÄÌôò Ï§ë...');
          const blobUrls = await Promise.all(
            result.photo.video_urls.map(async (url) => {
              try {
                const response = await fetch(url);
                const blob = await response.blob();
                const blobUrl = URL.createObjectURL(blob);
                console.log('‚úÖ Blob ÏÉùÏÑ± ÏôÑÎ£å:', url.substring(url.lastIndexOf('/') + 1));
                return blobUrl;
              } catch (error) {
                console.error('‚ùå Blob Î≥ÄÌôò Ïã§Ìå®:', error);
                return url; // Ïã§Ìå®Ïãú ÏõêÎ≥∏ URL ÏÇ¨Ïö©
              }
            })
          );
          setVideoBlobUrls(blobUrls);
          console.log('‚úÖ Î™®Îì† ÎπÑÎîîÏò§ Blob Î≥ÄÌôò ÏôÑÎ£å');
        } else {
          console.warn('‚ö†Ô∏è ÎèôÏòÅÏÉÅÏù¥ ÏóÜÏäµÎãàÎã§. video_urls:', result.photo?.video_urls);
          setError('ÎùºÏù¥Î∏å Ìè¨ÌÜ†Í∞Ä ÏóÜÏäµÎãàÎã§.');
        }

        setLoading(false);
      } catch (err) {
        console.error('‚ùå ÎèôÏòÅÏÉÅ Î°úÎìú Ïã§Ìå®:', err);
        setError('ÎèôÏòÅÏÉÅÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
        setLoading(false);
      }
    };

    loadVideos();
  }, [searchParams]);

  // Ïπ¥Ïö¥Ìä∏Îã§Ïö¥ ÌõÑ ÎèôÏòÅÏÉÅ Ïû¨ÏÉù
  useEffect(() => {
    if (videoBlobUrls.length > 0 && !loading) {
      const timer = setInterval(() => {
        setCountdown((prev) => {
          if (prev <= 1) {
            clearInterval(timer);
            setShowVideos(true);

            // Î™®Îì† ÎπÑÎîîÏò§ Ïû¨ÏÉù ÏãúÏûë
            videoRefs.current.forEach(video => {
              if (video) {
                video.play().catch(e => console.error('ÎπÑÎîîÏò§ Ïû¨ÏÉù Ïã§Ìå®:', e));
              }
            });

            return 0;
          }
          return prev - 1;
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [videoBlobUrls, loading]);

  // ÎùºÏù¥Î∏å Ìè¨ÌÜ† Ï†ÄÏû• (MP4 ÎπÑÎîîÏò§Î°ú Ï†ÄÏû•)
  const handleSaveLivePhoto = async () => {
    console.log('üé• ÎùºÏù¥Î∏å Ìè¨ÌÜ† Ï†ÄÏû• ÏãúÏûë...');
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    console.log('üì± Í∏∞Í∏∞ Ï†ïÎ≥¥:', {
      userAgent: navigator.userAgent,
      isIOS,
      mediaRecorderSupported: typeof MediaRecorder !== 'undefined'
    });

    if (videoUrls.length === 0) {
      alert('ÎèôÏòÅÏÉÅÏù¥ Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      return;
    }

    // MediaRecorder ÏßÄÏõê ÌôïÏù∏
    if (typeof MediaRecorder === 'undefined') {
      console.error('‚ùå MediaRecorder API ÎØ∏ÏßÄÏõê');
      alert('Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ïù¥ Î∏åÎùºÏö∞Ï†ÄÎäî ÎπÑÎîîÏò§ ÎÖπÌôîÎ•º ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.\n\nÏµúÏã† Safari ÎòêÎäî ChromeÏùÑ ÏÇ¨Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    try {
      const canvas = canvasRef.current;
      const ctx = canvas.getContext('2d');
      const videos = videoRefs.current;

      // Í∞Å ÎπÑÎîîÏò§ ÏÉÅÌÉú ÌôïÏù∏
      const readyVideos = videos.filter(v => v && v.readyState >= 2);
      console.log('‚úÖ Ï§ÄÎπÑÎêú ÎπÑÎîîÏò§:', readyVideos.length, 'Í∞ú');

      if (readyVideos.length === 0) {
        alert('ÎπÑÎîîÏò§Í∞Ä ÏïÑÏßÅ Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }

      // Î™®Îì† ÎπÑÎîîÏò§Î•º Ï≤òÏùåÎ∂ÄÌÑ∞ Ïû¨ÏÉù
      await Promise.all(readyVideos.map(async (video) => {
        video.currentTime = 0;
        if (video.paused) {
          await video.play().catch(e => console.warn('Ïû¨ÏÉù Ïã§Ìå®:', e));
        }
      }));

      // Ï≤´ Î≤àÏß∏ ÎπÑÎîîÏò§Ïùò ÏõêÎ≥∏ ÌÅ¨Í∏∞ Í∞ÄÏ†∏Ïò§Í∏∞
      const firstVideo = readyVideos[0];
      const videoWidth = firstVideo.videoWidth;
      const videoHeight = firstVideo.videoHeight;

      console.log('üìê ÏõêÎ≥∏ ÎπÑÎîîÏò§ ÌÅ¨Í∏∞:', videoWidth, 'x', videoHeight);

      const spacing = 20;
      const padding = 40;

      // Ï∫îÎ≤ÑÏä§ ÌÅ¨Í∏∞ ÏÑ§Ï†ï
      if (layoutType === '2x2') {
        const size = 280;
        canvas.width = (size * 2) + spacing + (padding * 2);
        canvas.height = (size * 2) + spacing + (padding * 2);
      } else {
        canvas.width = videoWidth + (padding * 2);
        canvas.height = (videoHeight * 4) + (spacing * 3) + (padding * 2);
      }

      console.log('üé® Ï∫îÎ≤ÑÏä§ ÌÅ¨Í∏∞:', canvas.width, 'x', canvas.height);

      // MediaRecorder ÏÑ§Ï†ï - ÏΩîÎç± ÏßÄÏõê ÌôïÏù∏
      const stream = canvas.captureStream(30); // 30 FPS

      // ÏßÄÏõêÎêòÎäî ÏΩîÎç± ÌôïÏù∏
      const mimeTypes = [
        'video/webm;codecs=vp9',
        'video/webm;codecs=vp8',
        'video/webm',
        'video/mp4'
      ];

      let selectedMimeType = '';
      for (const mimeType of mimeTypes) {
        if (MediaRecorder.isTypeSupported(mimeType)) {
          selectedMimeType = mimeType;
          console.log('‚úÖ ÏßÄÏõêÎêòÎäî ÏΩîÎç±:', mimeType);
          break;
        } else {
          console.log('‚ùå ÎØ∏ÏßÄÏõê ÏΩîÎç±:', mimeType);
        }
      }

      if (!selectedMimeType) {
        throw new Error('ÏßÄÏõêÎêòÎäî ÎπÑÎîîÏò§ ÏΩîÎç±Ïù¥ ÏóÜÏäµÎãàÎã§.');
      }

      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: selectedMimeType,
        videoBitsPerSecond: 2500000 // 2.5 Mbps
      });

      console.log('üé¨ MediaRecorder ÏÉùÏÑ±:', {
        mimeType: selectedMimeType,
        state: mediaRecorder.state
      });

      const chunks = [];
      mediaRecorder.ondataavailable = (e) => {
        if (e.data.size > 0) {
          chunks.push(e.data);
        }
      };

      // ÎÖπÌôî ÏôÑÎ£å Ï≤òÎ¶¨
      const recordingComplete = new Promise((resolve) => {
        mediaRecorder.onstop = () => {
          const blob = new Blob(chunks, { type: selectedMimeType });
          console.log('üì¶ Blob ÏÉùÏÑ± ÏôÑÎ£å:', {
            size: Math.round(blob.size / 1024),
            type: blob.type
          });
          resolve(blob);
        };
      });

      // ÎπÑÎîîÏò§ Ïû¨ÏÉù Ïï†ÎãàÎ©îÏù¥ÏÖò Ìï®Ïàò
      const drawFrame = () => {
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        if (layoutType === '2x2') {
          const size = 280;
          const positions = [
            { x: padding, y: padding },
            { x: padding + size + spacing, y: padding },
            { x: padding, y: padding + size + spacing },
            { x: padding + size + spacing, y: padding + size + spacing }
          ];

          for (let i = 0; i < Math.min(4, readyVideos.length); i++) {
            const video = readyVideos[i];
            const pos = positions[i];
            const sourceSize = Math.min(video.videoWidth, video.videoHeight);
            const sx = (video.videoWidth - sourceSize) / 2;
            const sy = (video.videoHeight - sourceSize) / 2;
            ctx.drawImage(video, sx, sy, sourceSize, sourceSize, pos.x, pos.y, size, size);
          }
        } else {
          for (let i = 0; i < Math.min(4, readyVideos.length); i++) {
            const video = readyVideos[i];
            const y = padding + (i * (videoHeight + spacing));
            ctx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight, padding, y, videoWidth, videoHeight);
          }
        }
      };

      // ÎÖπÌôî ÏãúÏûë
      setIsRecording(true);
      mediaRecorder.start();
      console.log('üî¥ ÎÖπÌôî ÏãúÏûë...');

      // ÎπÑÎîîÏò§ Ïû¨ÏÉù Ï§ë ÌîÑÎ†àÏûÑ Í∑∏Î¶¨Í∏∞
      // ÎùºÏù¥Î∏å Ìè¨ÌÜ†Îäî Ìï≠ÏÉÅ 10Ï¥àÎ°ú Í≥†Ï†ï (ÎπÑÎîîÏò§ Î£®ÌîÑ Ïû¨ÏÉùÏúºÎ°ú 10Ï¥à Ï±ÑÏõÄ)
      const videoDuration = 10;
      const originalDuration = Math.max(...readyVideos.map(v => v.duration || 5));
      console.log(`‚è±Ô∏è ÎùºÏù¥Î∏å Ìè¨ÌÜ† ÎÖπÌôî: ${videoDuration}Ï¥à (ÏõêÎ≥∏ ÎπÑÎîîÏò§: ${originalDuration.toFixed(1)}Ï¥à - Î£®ÌîÑ Ïû¨ÏÉùÏúºÎ°ú 10Ï¥à Ï±ÑÏõÄ)`);

      let animationId;
      const animate = () => {
        drawFrame();
        animationId = requestAnimationFrame(animate);
      };
      animate();

      // ÎπÑÎîîÏò§ Ï¢ÖÎ£å ÎåÄÍ∏∞
      await new Promise(resolve => {
        setTimeout(() => {
          cancelAnimationFrame(animationId);
          mediaRecorder.stop();
          console.log('‚èπÔ∏è ÎÖπÌôî Ï¢ÖÎ£å');
          resolve();
        }, videoDuration * 1000);
      });

      const blob = await recordingComplete;
      setIsRecording(false);
      console.log('üì¶ ÎπÑÎîîÏò§ ÏÉùÏÑ± ÏôÑÎ£å:', Math.round(blob.size / 1024 / 1024), 'MB');

      // ÌååÏùº ÌôïÏû•Ïûê Í≤∞Ï†ï
      const extension = selectedMimeType.includes('mp4') ? 'mp4' : 'webm';
      const filename = `chupbox_live_photo_${Date.now()}.${extension}`;
      console.log('üíæ ÌååÏùºÎ™Ö:', filename);

      // iOS Í∏∞Í∏∞ Í∞êÏßÄ
      const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
      const isAndroid = /Android/.test(navigator.userAgent);

      // Îã§Ïö¥Î°úÎìú Î∞©Ïãù ÏÇ¨Ïö© (Web Share APIÎäî ÏÇ¨Ïö©Ïûê Ï†úÏä§Ï≤ò Ïª®ÌÖçÏä§Ìä∏ ÏÜêÏã§Î°ú Ïã†Î¢∞ Î∂àÍ∞Ä)
      console.log('üíæ Îã§Ïö¥Î°úÎìú ÏãúÏûë...', { isIOS, isAndroid });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.style.display = 'none';
      document.body.appendChild(a);
      a.click();

      setTimeout(() => {
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, 100);

      console.log('‚úÖ Îã§Ïö¥Î°úÎìú ÏôÑÎ£å');

      // Í∏∞Í∏∞Î≥Ñ ÏïàÎÇ¥ Î©îÏãúÏßÄ
      if (isIOS) {
        alert('‚úÖ ÎùºÏù¥Î∏å Ìè¨ÌÜ†Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!\n\nüì± Safari Îã§Ïö¥Î°úÎìú Î≤ÑÌäºÏùÑ ÎàåÎü¨\nÌååÏùº Ïï±ÏóêÏÑú ÌôïÏù∏ÌïòÏÑ∏Ïöî.\n\nüí° Í∞§Îü¨Î¶¨Ïóê Ï†ÄÏû•ÌïòÎ†§Î©¥:\n1. ÌååÏùº Ïï± > Îã§Ïö¥Î°úÎìú Ìè¥Îçî\n2. ÏòÅÏÉÅÏùÑ Í∏∏Í≤å ÎàåÎü¨ Í≥µÏú†\n3. "ÎπÑÎîîÏò§ Ï†ÄÏû•" ÏÑ†ÌÉù');
      } else if (isAndroid) {
        alert('‚úÖ ÎùºÏù¥Î∏å Ìè¨ÌÜ†Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!\n\nüì± Îã§Ïö¥Î°úÎìú Ìè¥ÎçîÏóêÏÑú ÌôïÏù∏ÌïòÏÑ∏Ïöî.\n\nüí° ÏùºÎ∂Ä Î∏åÎùºÏö∞Ï†ÄÎäî ÌååÏùº Ïï±Ïù¥ÎÇò\nÍ∞§Îü¨Î¶¨ Ïï±ÏóêÏÑú ÌôïÏù∏ Í∞ÄÎä•Ìï©ÎãàÎã§.');
      } else {
        alert('‚úÖ Îã§Ïö¥Î°úÎìú ÏôÑÎ£å!\n\nüíª Îã§Ïö¥Î°úÎìú Ìè¥ÎçîÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.');
      }

    } catch (error) {
      console.error('‚ùå Ï†ÄÏû• Ïã§Ìå®:', error);
      console.error('ÏóêÎü¨ Ïä§ÌÉù:', error.stack);
      setIsRecording(false);
      alert('ÎùºÏù¥Î∏å Ìè¨ÌÜ† Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.\n\nÏóêÎü¨: ' + error.message + '\n\nÏΩòÏÜî Î°úÍ∑∏Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <p className="text-white">ÎùºÏù¥Î∏å Ìè¨ÌÜ†Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
      </div>
    );
  }

  if (error || videoUrls.length === 0) {
    return (
      <div className="min-h-screen bg-black flex flex-col items-center justify-center p-4">
        <div className="text-center">
          <div className="text-6xl mb-4">üò¢</div>
          <p className="text-white text-xl mb-4">{error || 'ÎùºÏù¥Î∏å Ìè¨ÌÜ†Í∞Ä ÏóÜÏäµÎãàÎã§'}</p>
          <button
            onClick={() => window.close()}
            className="px-6 py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-lg font-semibold"
          >
            Îã´Í∏∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black flex flex-col items-center p-4 overflow-y-auto">
      {/* Ïπ¥Ïö¥Ìä∏Îã§Ïö¥ */}
      {!showVideos && (
        <div className="absolute inset-0 flex items-center justify-center z-10 bg-black bg-opacity-80">
          <div className="text-center">
            <div className="text-6xl font-bold text-white animate-pulse mb-2">
              {countdown}
            </div>
            <div className="text-xl text-white">
              üé¨ ÎùºÏù¥Î∏å Ìè¨ÌÜ†Í∞Ä Í≥ß Ïû¨ÏÉùÎê©ÎãàÎã§
            </div>
          </div>
        </div>
      )}

      {/* ÎÖπÌôî Ï§ë Ïò§Î≤ÑÎ†àÏù¥ - fixed positioning for iOS */}
      {isRecording && (
        <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-90">
          <div className="text-center">
            <div className="w-16 h-16 border-4 border-purple-500 border-t-transparent rounded-full animate-spin mb-4 mx-auto"></div>
            <div className="text-2xl font-bold text-white mb-2">
              üé• ÎπÑÎîîÏò§ ÏÉùÏÑ± Ï§ë...
            </div>
            <div className="text-sm text-gray-400">
              Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî
            </div>
          </div>
        </div>
      )}

      {/* ÎπÑÎîîÏò§ Í∑∏Î¶¨Îìú - 4Ïª∑ ÏÇ¨ÏßÑÍ≥º Ï†ïÌôïÌûà ÎèôÏùºÌïú Î†àÏù¥ÏïÑÏõÉ */}
      <div
        ref={containerRef}
        className="bg-white rounded-xl mt-4 mb-4 flex-shrink-0"
        style={{
          padding: '20px',
          display: 'grid',
          gap: '10px',
          gridTemplateColumns: layoutType === '2x2' ? 'repeat(2, 140px)' : '1fr',
          gridTemplateRows: layoutType === '2x2' ? 'repeat(2, 140px)' : 'repeat(4, auto)',
          maxWidth: '90vw',
          width: layoutType === '2x2' ? 'auto' : '300px'
        }}
      >
        {videoBlobUrls.map((videoBlobUrl, index) => (
          <div
            key={index}
            className="relative bg-gray-900 rounded overflow-hidden cursor-pointer"
            style={{
              width: '100%',
              aspectRatio: layoutType === '2x2' ? '1 / 1' : '4 / 3'
            }}
            onClick={(e) => {
              // ÎπÑÎîîÏò§ ÌÅ¥Î¶≠ Ïãú Ïû¨ÏÉù/ÏùºÏãúÏ†ïÏßÄ ÌÜ†Í∏Ä
              const video = videoRefs.current[index];
              if (video) {
                if (video.paused) {
                  video.play().catch(err => console.error('Ïû¨ÏÉù Ïã§Ìå®:', err));
                } else {
                  video.pause();
                }
              }
            }}
          >
            <div className="absolute top-2 left-2 bg-black bg-opacity-70 text-white text-xs px-2 py-1 rounded z-10">
              {index + 1}Î≤àÏß∏ ÏàúÍ∞Ñ
            </div>
            <video
              ref={el => videoRefs.current[index] = el}
              src={videoBlobUrl}
              autoPlay
              loop
              muted
              playsInline
              preload="auto"
              className="w-full h-full"
              style={{
                objectFit: layoutType === '2x2' ? 'cover' : 'contain',
                opacity: showVideos ? 1 : 0.3,
                transition: 'opacity 0.5s'
              }}
              onLoadedData={(e) => {
                console.log(`‚úÖ ÎπÑÎîîÏò§ ${index + 1} Î°úÎìú ÏôÑÎ£å, Ïû¨ÏÉù ÏãúÎèÑ...`);
                e.target.play().catch(err => {
                  console.error(`‚ùå ÎπÑÎîîÏò§ ${index + 1} ÏûêÎèôÏû¨ÏÉù Ïã§Ìå®:`, err);
                });
              }}
            />
          </div>
        ))}
      </div>

      <div className="text-center mt-2 mb-4">
        <p className="text-white text-sm">
          üé• Ï¥¨ÏòÅ Ï†Ñ Ï§ÄÎπÑÌïòÎäî Î™®ÏäµÏùÑ Îã¥ÏùÄ ÎùºÏù¥Î∏å Ìè¨ÌÜ†
        </p>
        <p className="text-gray-400 text-xs mt-1">
          üí° ÎπÑÎîîÏò§Î•º ÌÉ≠ÌïòÎ©¥ Ïû¨ÏÉù/ÏùºÏãúÏ†ïÏßÄÎê©ÎãàÎã§
        </p>
      </div>

      {/* ÌïòÎã® Î≤ÑÌäº - Í≥†Ï†ï */}
      {showVideos && (
        <div className="mt-auto w-full max-w-md flex flex-col gap-3 px-4">
          <button
            onClick={handleSaveLivePhoto}
            disabled={isRecording}
            className={`w-full px-6 py-4 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white rounded-lg font-bold shadow-lg text-lg transition-opacity ${
              isRecording ? 'opacity-50 cursor-not-allowed' : ''
            }`}
          >
            üì• ÎùºÏù¥Î∏å Ìè¨ÌÜ† Ï†ÄÏû•ÌïòÍ∏∞
          </button>
          <button
            onClick={() => window.close()}
            disabled={isRecording}
            className={`w-full px-6 py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-lg font-semibold transition-opacity ${
              isRecording ? 'opacity-50 cursor-not-allowed' : ''
            }`}
          >
            Îã´Í∏∞
          </button>
        </div>
      )}

      {/* Ïà®Í≤®ÏßÑ Ï∫îÎ≤ÑÏä§ (Ìï©ÏÑ±Ïö©) */}
      <canvas ref={canvasRef} className="hidden" />
    </div>
  );
}

export default function LivePhotoPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-black flex items-center justify-center">
        <p className="text-white">ÎùºÏù¥Î∏å Ìè¨ÌÜ†Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
      </div>
    }>
      <LivePhotoContent />
    </Suspense>
  );
}
